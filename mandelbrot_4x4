/*#include <stdlib.h>
#include <stdio.h>

int main(){
	
	double a[] = {5, 6, 7, 8, 9, 0};
	double b[] = {2, 5, 7, 6, 1, 1};
	double c[6];
	int i;
	//#pragma loop(no_vector);
	#pragma loop(hint_parallel(8));
	for(i=0;i<6;i++)
	{
		c[i] = a[i] + b[i];
	}

}*/
/* 
Modified from: http://rosettacode.org/wiki/Mandelbrot_set#PPM_non_interactive
c program:
--------------------------------
1. draws Mandelbrot set for Fc(z)=z*z +c
using Mandelbrot algorithm ( boolean escape time )
-------------------------------         
2. technique of creating ppm file is  based on the code of Claudio Rocchini
http://en.wikipedia.org/wiki/Image:Color_complex_plot.jpg
create 24 bit color graphic file ,  portable pixmap file = PPM 
see http://en.wikipedia.org/wiki/Portable_pixmap
to see the file use external application ( graphic viewer)
*/
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

int main()
{
        /* screen ( integer) coordinate */
        int iX,iY;
	   int num;
        const int iXmax = 16384; 
        const int iYmax = 16384;
        /* world ( double) coordinate = parameter plane*/
        float Cx;
	   float Cy;
	   //float Cxf =(float) Cx;
	   //float Cyf =(float) Cy;
        const float CxMin=-2.5;
        const float CxMax=1.5;
        const float CyMin=-2.0;
        const float CyMax=2.0;
        /* */
        float PixelWidth =(CxMax-CxMin)/iXmax;
        float PixelHeight =(CyMax-CyMin)/iYmax;

        /* color component ( R or G or B) is coded from 0 to 255 */
        /* it is 24 bit color RGB file */
        const int MaxColorComponentValue=255; 
	   clock_t start, end1;
        double cpu_time_used;
        FILE * fp;
        char *filename="mandelbrot.ppm";
        static unsigned char color[12];
        /* Z=Zx+Zy*i  ;   Z0 = 0 */
        float Zx, Zy;
        float Zx2, Zy2; /* Zx2=Zx*Zx;  Zy2=Zy*Zy  */
	   //float Zxf =(float) Zx, Zyf =(float) Zy;
        //float Zx2f =(float) Zx2, Zy2f =(float) Zy2; /* Zx2=Zx*Zx;  Zy2=Zy*Zy  */
        /*  */
        int Iteration;
        const int IterationMax=256;
	   static unsigned char u[3];
        /* bail-out value , radius of circle ;  */
        const double EscapeRadius=2;
        float ER2=EscapeRadius*EscapeRadius;
	   
        /*create new file,give it a name and open it in binary mode  */
        fp= fopen(filename,"wb"); /* b -  binary mode */
        /*write ASCII header to the file*/
        fprintf(fp,"P6\n %d\n %d\n %d\n",iXmax,iYmax,MaxColorComponentValue);
        /* compute and write image data bytes to the file*/
	   //#pragma loop(no_vector);
	   //#pragma loop(hint_parallel(3));
	   start = clock();
        for(iY=0;iY<iYmax;iY++)
        {
             Cy=CyMin + iY*PixelHeight;
             if (fabs(Cy)< PixelHeight/2) 
			   Cy=0.0; /* Main antenna */
		   //#pragma loop(no_vector); 
	        //#pragma loop(hint_parallel(3));
             for(iX=0;iX<iXmax;iX+=4)
             {         

                        Cx=CxMin + iX*PixelWidth;
                        /* initial value of orbit = critical point Z= 0 */
                        Zx=0.0;
                        Zy=0.0;
				
                        Zx2=Zx*Zx;
                        Zy2=Zy*Zy;
				    		   
                        /* */
				    //#pragma loop(no_vector);
				    //#pragma loop(hint_parallel(3));
                        for (Iteration=0;Iteration<IterationMax && ((Zx2+Zy2)<ER2);Iteration++)
                        {			    
							Zy=2*Zx*Zy + Cy;
							Zx=Zx2-Zy2 +Cx;
							Zx2=Zx*Zx;
							Zy2=Zy*Zy;		
                        };
                        /* compute  pixel color (24 bit = 3 bytes) */
                        if (Iteration==IterationMax)
                        { /*  interior of Mandelbrot set = black */
                           /*color[0]=0;
                           color[1]=0;
                           color[2]=0; 

					  color[3]=0;
                           color[4]=0;
                           color[5]=0;

					  color[6]=0;
                           color[7]=0;
                           color[8]=0;

					  color[9]=0;
                           color[10]=0;
                           color[11]=0;

					  color[12]=0;
                           color[13]=0;
                           color[14]=0; 

					  color[15]=0;
                           color[16]=0;
                           color[17]=0;

					  color[18]=0;
                           color[19]=0;
                           color[20]=0;

					  color[21]=0;
                           color[22]=0;
                           color[23]=0;*/
					    __asm{
						    mov ecx, 2
						    xor ebx, ebx
						    pxor mm0, mm0
						L1:
						    movq color[ebx], mm0
						    add ebx, 6
						    loop L1
					    }
					
                        }
                        else 
                        { /* exterior of Mandelbrot set = white */
                             u[0]=((IterationMax-Iteration) % 8) * 63;  /* Red */
                             u[1]=((IterationMax-Iteration) % 4) * 127 ;  /* Green */ 
                             u[2]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    __asm{
						     mov ecx, 2
						     xor ebx, ebx
						     movd mm1, u
							movd mm2, u
							psllq mm1, 24
							paddd mm1, mm2
						L2:
						     movq color[ebx], mm1
						     add ebx, 6
						     loop L2
					    }
										
					    //color[3]=u[0];  /* Red */
                             //color[4]=u[1];  /* Green */ 
                             //color[5]=u[2];  /* Blue */

					    //color[6]=((IterationMax-Iteration) % 8) *  63;  /* Red */
                             //color[7]=((IterationMax-Iteration) % 4) * 127;  /* Green */ 
                             //color[8]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    //color[9]=((IterationMax-Iteration) % 8) *  63;  /* Red */
                             //color[10]=((IterationMax-Iteration) % 4) * 127;  /* Green */ 
                             //color[11]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    //color[12]=((IterationMax-Iteration) % 8) *  63;  /* Red */
                             //color[13]=((IterationMax-Iteration) % 4) * 127;  /* Green */ 
                             //color[14]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    //color[15]=((IterationMax-Iteration) % 8) *  63;  /* Red */
                             //color[16]=((IterationMax-Iteration) % 4) * 127;  /* Green */ 
                             //color[17]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    //color[18]=((IterationMax-Iteration) % 8) *  63;  /* Red */
                             //color[19]=((IterationMax-Iteration) % 4) * 127;  /* Green */ 
                             //color[20]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    //color[21]=((IterationMax-Iteration) % 8) *  63;  /* Red */
                             //color[22]=((IterationMax-Iteration) % 4) * 127;  /* Green */ 
                             //color[23]=((IterationMax-Iteration) % 2) * 255;  /* Blue */

					    
                        }; 
				    
                        /*write color to the file*/
                        fwrite(color,1,12,fp);
		   }
                }
          end1 = clock();
          fclose(fp);
		cpu_time_used = ((double)(end1 - start)) / CLOCKS_PER_SEC;
		printf("time = %f seconds\n", cpu_time_used);
		scanf("%d", &num);
        return 0;
}
